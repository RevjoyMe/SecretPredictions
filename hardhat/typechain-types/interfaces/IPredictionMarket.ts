/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IPredictionMarket {
  export type MarketStruct = {
    id: BigNumberish;
    question: string;
    description: string;
    endTime: BigNumberish;
    resolutionTime: BigNumberish;
    state: BigNumberish;
    outcome: boolean;
    oracle: AddressLike;
    totalPool: BigNumberish;
    yesPool: BigNumberish;
    noPool: BigNumberish;
    creationTime: BigNumberish;
    creator: AddressLike;
    fee: BigNumberish;
  };

  export type MarketStructOutput = [
    id: bigint,
    question: string,
    description: string,
    endTime: bigint,
    resolutionTime: bigint,
    state: bigint,
    outcome: boolean,
    oracle: string,
    totalPool: bigint,
    yesPool: bigint,
    noPool: bigint,
    creationTime: bigint,
    creator: string,
    fee: bigint
  ] & {
    id: bigint;
    question: string;
    description: string;
    endTime: bigint;
    resolutionTime: bigint;
    state: bigint;
    outcome: boolean;
    oracle: string;
    totalPool: bigint;
    yesPool: bigint;
    noPool: bigint;
    creationTime: bigint;
    creator: string;
    fee: bigint;
  };

  export type PositionStruct = {
    encryptedYesAmount: BigNumberish;
    encryptedNoAmount: BigNumberish;
    encryptedBetCount: BigNumberish;
    hasPosition: BigNumberish;
  };

  export type PositionStructOutput = [
    encryptedYesAmount: bigint,
    encryptedNoAmount: bigint,
    encryptedBetCount: bigint,
    hasPosition: bigint
  ] & {
    encryptedYesAmount: bigint;
    encryptedNoAmount: bigint;
    encryptedBetCount: bigint;
    hasPosition: bigint;
  };
}

export interface IPredictionMarketInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimPayout"
      | "createMarket"
      | "getMarket"
      | "getPosition"
      | "placeBet"
      | "resolveMarket"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BetPlaced"
      | "MarketCreated"
      | "MarketResolved"
      | "PayoutClaimed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claimPayout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarket",
    values: [string, string, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "placeBet",
    values: [BigNumberish, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveMarket",
    values: [BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "placeBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resolveMarket",
    data: BytesLike
  ): Result;
}

export namespace BetPlacedEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    user: AddressLike,
    outcome: boolean,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    marketId: bigint,
    user: string,
    outcome: boolean,
    timestamp: bigint
  ];
  export interface OutputObject {
    marketId: bigint;
    user: string;
    outcome: boolean;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketCreatedEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    question: string,
    endTime: BigNumberish,
    creator: AddressLike
  ];
  export type OutputTuple = [
    marketId: bigint,
    question: string,
    endTime: bigint,
    creator: string
  ];
  export interface OutputObject {
    marketId: bigint;
    question: string;
    endTime: bigint;
    creator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketResolvedEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    outcome: boolean,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    marketId: bigint,
    outcome: boolean,
    timestamp: bigint
  ];
  export interface OutputObject {
    marketId: bigint;
    outcome: boolean;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PayoutClaimedEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    user: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [marketId: bigint, user: string, amount: bigint];
  export interface OutputObject {
    marketId: bigint;
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPredictionMarket extends BaseContract {
  connect(runner?: ContractRunner | null): IPredictionMarket;
  waitForDeployment(): Promise<this>;

  interface: IPredictionMarketInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimPayout: TypedContractMethod<
    [marketId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createMarket: TypedContractMethod<
    [
      question: string,
      description: string,
      endTime: BigNumberish,
      oracle: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  getMarket: TypedContractMethod<
    [marketId: BigNumberish],
    [IPredictionMarket.MarketStructOutput],
    "view"
  >;

  getPosition: TypedContractMethod<
    [marketId: BigNumberish],
    [IPredictionMarket.PositionStructOutput],
    "view"
  >;

  placeBet: TypedContractMethod<
    [
      marketId: BigNumberish,
      encryptedAmount: BytesLike,
      encryptedOutcome: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "payable"
  >;

  resolveMarket: TypedContractMethod<
    [marketId: BigNumberish, outcome: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimPayout"
  ): TypedContractMethod<[marketId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createMarket"
  ): TypedContractMethod<
    [
      question: string,
      description: string,
      endTime: BigNumberish,
      oracle: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getMarket"
  ): TypedContractMethod<
    [marketId: BigNumberish],
    [IPredictionMarket.MarketStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPosition"
  ): TypedContractMethod<
    [marketId: BigNumberish],
    [IPredictionMarket.PositionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "placeBet"
  ): TypedContractMethod<
    [
      marketId: BigNumberish,
      encryptedAmount: BytesLike,
      encryptedOutcome: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "resolveMarket"
  ): TypedContractMethod<
    [marketId: BigNumberish, outcome: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BetPlaced"
  ): TypedContractEvent<
    BetPlacedEvent.InputTuple,
    BetPlacedEvent.OutputTuple,
    BetPlacedEvent.OutputObject
  >;
  getEvent(
    key: "MarketCreated"
  ): TypedContractEvent<
    MarketCreatedEvent.InputTuple,
    MarketCreatedEvent.OutputTuple,
    MarketCreatedEvent.OutputObject
  >;
  getEvent(
    key: "MarketResolved"
  ): TypedContractEvent<
    MarketResolvedEvent.InputTuple,
    MarketResolvedEvent.OutputTuple,
    MarketResolvedEvent.OutputObject
  >;
  getEvent(
    key: "PayoutClaimed"
  ): TypedContractEvent<
    PayoutClaimedEvent.InputTuple,
    PayoutClaimedEvent.OutputTuple,
    PayoutClaimedEvent.OutputObject
  >;

  filters: {
    "BetPlaced(uint256,address,bool,uint256)": TypedContractEvent<
      BetPlacedEvent.InputTuple,
      BetPlacedEvent.OutputTuple,
      BetPlacedEvent.OutputObject
    >;
    BetPlaced: TypedContractEvent<
      BetPlacedEvent.InputTuple,
      BetPlacedEvent.OutputTuple,
      BetPlacedEvent.OutputObject
    >;

    "MarketCreated(uint256,string,uint256,address)": TypedContractEvent<
      MarketCreatedEvent.InputTuple,
      MarketCreatedEvent.OutputTuple,
      MarketCreatedEvent.OutputObject
    >;
    MarketCreated: TypedContractEvent<
      MarketCreatedEvent.InputTuple,
      MarketCreatedEvent.OutputTuple,
      MarketCreatedEvent.OutputObject
    >;

    "MarketResolved(uint256,bool,uint256)": TypedContractEvent<
      MarketResolvedEvent.InputTuple,
      MarketResolvedEvent.OutputTuple,
      MarketResolvedEvent.OutputObject
    >;
    MarketResolved: TypedContractEvent<
      MarketResolvedEvent.InputTuple,
      MarketResolvedEvent.OutputTuple,
      MarketResolvedEvent.OutputObject
    >;

    "PayoutClaimed(uint256,address,uint256)": TypedContractEvent<
      PayoutClaimedEvent.InputTuple,
      PayoutClaimedEvent.OutputTuple,
      PayoutClaimedEvent.OutputObject
    >;
    PayoutClaimed: TypedContractEvent<
      PayoutClaimedEvent.InputTuple,
      PayoutClaimedEvent.OutputTuple,
      PayoutClaimedEvent.OutputObject
    >;
  };
}
