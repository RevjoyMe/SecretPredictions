/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace EncryptedBetting {
  export type EncryptedPositionStruct = {
    yesAmount: BigNumberish;
    noAmount: BigNumberish;
    betCount: BigNumberish;
    hasPosition: BigNumberish;
    hasClaimed: BigNumberish;
  };

  export type EncryptedPositionStructOutput = [
    yesAmount: bigint,
    noAmount: bigint,
    betCount: bigint,
    hasPosition: bigint,
    hasClaimed: bigint
  ] & {
    yesAmount: bigint;
    noAmount: bigint;
    betCount: bigint;
    hasPosition: bigint;
    hasClaimed: bigint;
  };
}

export interface EncryptedBettingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "authorizedCallers"
      | "calculatePayout"
      | "emergencyDecryptPosition"
      | "getEncryptedPosition"
      | "getMarketStats"
      | "getOddsData"
      | "getPoolSizes"
      | "getUserTotalBet"
      | "hasPosition"
      | "markClaimed"
      | "owner"
      | "predictionMarket"
      | "setAuthorizedCaller"
      | "setPredictionMarket"
      | "updatePosition"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "EncryptedBetPlaced" | "PositionUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "authorizedCallers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePayout",
    values: [BigNumberish, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyDecryptPosition",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedPosition",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketStats",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOddsData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolSizes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTotalBet",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPosition",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "markClaimed",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "predictionMarket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedCaller",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPredictionMarket",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePosition",
    values: [BigNumberish, AddressLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "authorizedCallers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyDecryptPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOddsData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolSizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTotalBet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "predictionMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPredictionMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePosition",
    data: BytesLike
  ): Result;
}

export namespace EncryptedBetPlacedEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    user: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [marketId: bigint, user: string, timestamp: bigint];
  export interface OutputObject {
    marketId: bigint;
    user: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionUpdatedEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    user: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [marketId: bigint, user: string, timestamp: bigint];
  export interface OutputObject {
    marketId: bigint;
    user: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EncryptedBetting extends BaseContract {
  connect(runner?: ContractRunner | null): EncryptedBetting;
  waitForDeployment(): Promise<this>;

  interface: EncryptedBettingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authorizedCallers: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  calculatePayout: TypedContractMethod<
    [marketId: BigNumberish, user: AddressLike, finalOutcome: boolean],
    [bigint],
    "view"
  >;

  emergencyDecryptPosition: TypedContractMethod<
    [marketId: BigNumberish, user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        yesAmount: bigint;
        noAmount: bigint;
        betCount: bigint;
      }
    ],
    "nonpayable"
  >;

  getEncryptedPosition: TypedContractMethod<
    [marketId: BigNumberish, user: AddressLike],
    [EncryptedBetting.EncryptedPositionStructOutput],
    "view"
  >;

  getMarketStats: TypedContractMethod<
    [marketId: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        totalYesPool: bigint;
        totalNoPool: bigint;
        totalBetters: bigint;
      }
    ],
    "view"
  >;

  getOddsData: TypedContractMethod<
    [marketId: BigNumberish],
    [[bigint, bigint] & { yesRatio: bigint; noRatio: bigint }],
    "view"
  >;

  getPoolSizes: TypedContractMethod<
    [marketId: BigNumberish],
    [[bigint, bigint] & { yesPool: bigint; noPool: bigint }],
    "view"
  >;

  getUserTotalBet: TypedContractMethod<
    [marketId: BigNumberish, user: AddressLike],
    [bigint],
    "view"
  >;

  hasPosition: TypedContractMethod<
    [marketId: BigNumberish, user: AddressLike],
    [bigint],
    "view"
  >;

  markClaimed: TypedContractMethod<
    [marketId: BigNumberish, user: AddressLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  predictionMarket: TypedContractMethod<[], [string], "view">;

  setAuthorizedCaller: TypedContractMethod<
    [caller: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;

  setPredictionMarket: TypedContractMethod<
    [_predictionMarket: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePosition: TypedContractMethod<
    [
      marketId: BigNumberish,
      user: AddressLike,
      amount: BigNumberish,
      outcome: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authorizedCallers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "calculatePayout"
  ): TypedContractMethod<
    [marketId: BigNumberish, user: AddressLike, finalOutcome: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "emergencyDecryptPosition"
  ): TypedContractMethod<
    [marketId: BigNumberish, user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        yesAmount: bigint;
        noAmount: bigint;
        betCount: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getEncryptedPosition"
  ): TypedContractMethod<
    [marketId: BigNumberish, user: AddressLike],
    [EncryptedBetting.EncryptedPositionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMarketStats"
  ): TypedContractMethod<
    [marketId: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        totalYesPool: bigint;
        totalNoPool: bigint;
        totalBetters: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOddsData"
  ): TypedContractMethod<
    [marketId: BigNumberish],
    [[bigint, bigint] & { yesRatio: bigint; noRatio: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolSizes"
  ): TypedContractMethod<
    [marketId: BigNumberish],
    [[bigint, bigint] & { yesPool: bigint; noPool: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserTotalBet"
  ): TypedContractMethod<
    [marketId: BigNumberish, user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasPosition"
  ): TypedContractMethod<
    [marketId: BigNumberish, user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "markClaimed"
  ): TypedContractMethod<
    [marketId: BigNumberish, user: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "predictionMarket"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setAuthorizedCaller"
  ): TypedContractMethod<
    [caller: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPredictionMarket"
  ): TypedContractMethod<
    [_predictionMarket: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePosition"
  ): TypedContractMethod<
    [
      marketId: BigNumberish,
      user: AddressLike,
      amount: BigNumberish,
      outcome: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "EncryptedBetPlaced"
  ): TypedContractEvent<
    EncryptedBetPlacedEvent.InputTuple,
    EncryptedBetPlacedEvent.OutputTuple,
    EncryptedBetPlacedEvent.OutputObject
  >;
  getEvent(
    key: "PositionUpdated"
  ): TypedContractEvent<
    PositionUpdatedEvent.InputTuple,
    PositionUpdatedEvent.OutputTuple,
    PositionUpdatedEvent.OutputObject
  >;

  filters: {
    "EncryptedBetPlaced(uint256,address,uint256)": TypedContractEvent<
      EncryptedBetPlacedEvent.InputTuple,
      EncryptedBetPlacedEvent.OutputTuple,
      EncryptedBetPlacedEvent.OutputObject
    >;
    EncryptedBetPlaced: TypedContractEvent<
      EncryptedBetPlacedEvent.InputTuple,
      EncryptedBetPlacedEvent.OutputTuple,
      EncryptedBetPlacedEvent.OutputObject
    >;

    "PositionUpdated(uint256,address,uint256)": TypedContractEvent<
      PositionUpdatedEvent.InputTuple,
      PositionUpdatedEvent.OutputTuple,
      PositionUpdatedEvent.OutputObject
    >;
    PositionUpdated: TypedContractEvent<
      PositionUpdatedEvent.InputTuple,
      PositionUpdatedEvent.OutputTuple,
      PositionUpdatedEvent.OutputObject
    >;
  };
}
