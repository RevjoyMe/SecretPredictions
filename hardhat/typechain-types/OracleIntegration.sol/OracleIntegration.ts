/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace OracleIntegration {
  export type OracleDataStruct = {
    oracleType: BigNumberish;
    dataFeed: AddressLike;
    apiEndpoint: string;
    threshold: BigNumberish;
    isActive: boolean;
    lastUpdate: BigNumberish;
    consensusOracles: AddressLike[];
  };

  export type OracleDataStructOutput = [
    oracleType: bigint,
    dataFeed: string,
    apiEndpoint: string,
    threshold: bigint,
    isActive: boolean,
    lastUpdate: bigint,
    consensusOracles: string[]
  ] & {
    oracleType: bigint;
    dataFeed: string;
    apiEndpoint: string;
    threshold: bigint;
    isActive: boolean;
    lastUpdate: bigint;
    consensusOracles: string[];
  };

  export type ResolutionDataStruct = {
    marketId: BigNumberish;
    outcome: boolean;
    timestamp: BigNumberish;
    evidence: string;
    resolver: AddressLike;
    isDisputed: boolean;
    disputeDeadline: BigNumberish;
  };

  export type ResolutionDataStructOutput = [
    marketId: bigint,
    outcome: boolean,
    timestamp: bigint,
    evidence: string,
    resolver: string,
    isDisputed: boolean,
    disputeDeadline: bigint
  ] & {
    marketId: bigint;
    outcome: boolean;
    timestamp: bigint;
    evidence: string;
    resolver: string;
    isDisputed: boolean;
    disputeDeadline: bigint;
  };
}

export interface OracleIntegrationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DISPUTE_PERIOD"
      | "MIN_DISPUTE_STAKE"
      | "authorizedOracles"
      | "configureOracle"
      | "disputeVoteCount"
      | "disputeVotes"
      | "emergencyResolve"
      | "getOracleConfig"
      | "getResolution"
      | "marketOracles"
      | "owner"
      | "predictionMarket"
      | "raiseDispute"
      | "resolutions"
      | "resolveDispute"
      | "resolveMarketChainlink"
      | "resolveMarketManual"
      | "setAuthorizedOracle"
      | "setPredictionMarket"
      | "submitConsensusVote"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DisputeRaised"
      | "DisputeResolved"
      | "MarketResolved"
      | "OracleConfigured"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DISPUTE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_DISPUTE_STAKE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedOracles",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "configureOracle",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike,
      string,
      BigNumberish,
      AddressLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeVoteCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeVotes",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyResolve",
    values: [BigNumberish, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleConfig",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getResolution",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "marketOracles",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "predictionMarket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "raiseDispute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resolutions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDispute",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveMarketChainlink",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveMarketManual",
    values: [BigNumberish, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedOracle",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPredictionMarket",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitConsensusVote",
    values: [BigNumberish, boolean, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DISPUTE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_DISPUTE_STAKE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeVoteCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyResolve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getResolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "predictionMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raiseDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolutions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveMarketChainlink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveMarketManual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPredictionMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitConsensusVote",
    data: BytesLike
  ): Result;
}

export namespace DisputeRaisedEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    disputer: AddressLike,
    stake: BigNumberish
  ];
  export type OutputTuple = [marketId: bigint, disputer: string, stake: bigint];
  export interface OutputObject {
    marketId: bigint;
    disputer: string;
    stake: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeResolvedEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    finalOutcome: boolean,
    disputeVotes: BigNumberish
  ];
  export type OutputTuple = [
    marketId: bigint,
    finalOutcome: boolean,
    disputeVotes: bigint
  ];
  export interface OutputObject {
    marketId: bigint;
    finalOutcome: boolean;
    disputeVotes: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketResolvedEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    outcome: boolean,
    resolver: AddressLike,
    evidence: string
  ];
  export type OutputTuple = [
    marketId: bigint,
    outcome: boolean,
    resolver: string,
    evidence: string
  ];
  export interface OutputObject {
    marketId: bigint;
    outcome: boolean;
    resolver: string;
    evidence: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OracleConfiguredEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    oracleType: BigNumberish,
    dataFeed: AddressLike
  ];
  export type OutputTuple = [
    marketId: bigint,
    oracleType: bigint,
    dataFeed: string
  ];
  export interface OutputObject {
    marketId: bigint;
    oracleType: bigint;
    dataFeed: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OracleIntegration extends BaseContract {
  connect(runner?: ContractRunner | null): OracleIntegration;
  waitForDeployment(): Promise<this>;

  interface: OracleIntegrationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DISPUTE_PERIOD: TypedContractMethod<[], [bigint], "view">;

  MIN_DISPUTE_STAKE: TypedContractMethod<[], [bigint], "view">;

  authorizedOracles: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  configureOracle: TypedContractMethod<
    [
      marketId: BigNumberish,
      oracleType: BigNumberish,
      dataFeed: AddressLike,
      apiEndpoint: string,
      threshold: BigNumberish,
      consensusOracles: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;

  disputeVoteCount: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  disputeVotes: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  emergencyResolve: TypedContractMethod<
    [marketId: BigNumberish, outcome: boolean, reason: string],
    [void],
    "nonpayable"
  >;

  getOracleConfig: TypedContractMethod<
    [marketId: BigNumberish],
    [OracleIntegration.OracleDataStructOutput],
    "view"
  >;

  getResolution: TypedContractMethod<
    [marketId: BigNumberish],
    [OracleIntegration.ResolutionDataStructOutput],
    "view"
  >;

  marketOracles: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, boolean, bigint] & {
        oracleType: bigint;
        dataFeed: string;
        apiEndpoint: string;
        threshold: bigint;
        isActive: boolean;
        lastUpdate: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  predictionMarket: TypedContractMethod<[], [string], "view">;

  raiseDispute: TypedContractMethod<
    [marketId: BigNumberish],
    [void],
    "payable"
  >;

  resolutions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, boolean, bigint, string, string, boolean, bigint] & {
        marketId: bigint;
        outcome: boolean;
        timestamp: bigint;
        evidence: string;
        resolver: string;
        isDisputed: boolean;
        disputeDeadline: bigint;
      }
    ],
    "view"
  >;

  resolveDispute: TypedContractMethod<
    [marketId: BigNumberish, finalOutcome: boolean],
    [void],
    "nonpayable"
  >;

  resolveMarketChainlink: TypedContractMethod<
    [marketId: BigNumberish],
    [void],
    "nonpayable"
  >;

  resolveMarketManual: TypedContractMethod<
    [marketId: BigNumberish, outcome: boolean, evidence: string],
    [void],
    "nonpayable"
  >;

  setAuthorizedOracle: TypedContractMethod<
    [oracle: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;

  setPredictionMarket: TypedContractMethod<
    [_predictionMarket: AddressLike],
    [void],
    "nonpayable"
  >;

  submitConsensusVote: TypedContractMethod<
    [marketId: BigNumberish, outcome: boolean, evidence: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DISPUTE_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_DISPUTE_STAKE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "authorizedOracles"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "configureOracle"
  ): TypedContractMethod<
    [
      marketId: BigNumberish,
      oracleType: BigNumberish,
      dataFeed: AddressLike,
      apiEndpoint: string,
      threshold: BigNumberish,
      consensusOracles: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "disputeVoteCount"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "disputeVotes"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "emergencyResolve"
  ): TypedContractMethod<
    [marketId: BigNumberish, outcome: boolean, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getOracleConfig"
  ): TypedContractMethod<
    [marketId: BigNumberish],
    [OracleIntegration.OracleDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getResolution"
  ): TypedContractMethod<
    [marketId: BigNumberish],
    [OracleIntegration.ResolutionDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "marketOracles"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, boolean, bigint] & {
        oracleType: bigint;
        dataFeed: string;
        apiEndpoint: string;
        threshold: bigint;
        isActive: boolean;
        lastUpdate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "predictionMarket"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "raiseDispute"
  ): TypedContractMethod<[marketId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "resolutions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, boolean, bigint, string, string, boolean, bigint] & {
        marketId: bigint;
        outcome: boolean;
        timestamp: bigint;
        evidence: string;
        resolver: string;
        isDisputed: boolean;
        disputeDeadline: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "resolveDispute"
  ): TypedContractMethod<
    [marketId: BigNumberish, finalOutcome: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resolveMarketChainlink"
  ): TypedContractMethod<[marketId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolveMarketManual"
  ): TypedContractMethod<
    [marketId: BigNumberish, outcome: boolean, evidence: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAuthorizedOracle"
  ): TypedContractMethod<
    [oracle: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPredictionMarket"
  ): TypedContractMethod<
    [_predictionMarket: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitConsensusVote"
  ): TypedContractMethod<
    [marketId: BigNumberish, outcome: boolean, evidence: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DisputeRaised"
  ): TypedContractEvent<
    DisputeRaisedEvent.InputTuple,
    DisputeRaisedEvent.OutputTuple,
    DisputeRaisedEvent.OutputObject
  >;
  getEvent(
    key: "DisputeResolved"
  ): TypedContractEvent<
    DisputeResolvedEvent.InputTuple,
    DisputeResolvedEvent.OutputTuple,
    DisputeResolvedEvent.OutputObject
  >;
  getEvent(
    key: "MarketResolved"
  ): TypedContractEvent<
    MarketResolvedEvent.InputTuple,
    MarketResolvedEvent.OutputTuple,
    MarketResolvedEvent.OutputObject
  >;
  getEvent(
    key: "OracleConfigured"
  ): TypedContractEvent<
    OracleConfiguredEvent.InputTuple,
    OracleConfiguredEvent.OutputTuple,
    OracleConfiguredEvent.OutputObject
  >;

  filters: {
    "DisputeRaised(uint256,address,uint256)": TypedContractEvent<
      DisputeRaisedEvent.InputTuple,
      DisputeRaisedEvent.OutputTuple,
      DisputeRaisedEvent.OutputObject
    >;
    DisputeRaised: TypedContractEvent<
      DisputeRaisedEvent.InputTuple,
      DisputeRaisedEvent.OutputTuple,
      DisputeRaisedEvent.OutputObject
    >;

    "DisputeResolved(uint256,bool,uint256)": TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;
    DisputeResolved: TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;

    "MarketResolved(uint256,bool,address,string)": TypedContractEvent<
      MarketResolvedEvent.InputTuple,
      MarketResolvedEvent.OutputTuple,
      MarketResolvedEvent.OutputObject
    >;
    MarketResolved: TypedContractEvent<
      MarketResolvedEvent.InputTuple,
      MarketResolvedEvent.OutputTuple,
      MarketResolvedEvent.OutputObject
    >;

    "OracleConfigured(uint256,uint8,address)": TypedContractEvent<
      OracleConfiguredEvent.InputTuple,
      OracleConfiguredEvent.OutputTuple,
      OracleConfiguredEvent.OutputObject
    >;
    OracleConfigured: TypedContractEvent<
      OracleConfiguredEvent.InputTuple,
      OracleConfiguredEvent.OutputTuple,
      OracleConfiguredEvent.OutputObject
    >;
  };
}
